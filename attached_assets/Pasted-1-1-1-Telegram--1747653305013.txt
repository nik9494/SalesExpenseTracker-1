1. Аутентификация и безопасность
1.1. Регистрация/логин через Telegram
Что видит пользователь:

При первом входе через бота Telegram открывается веб-приложение с кнопкой «Старт».

После нажатия система автоматически регистрирует пользователя, используя данные из Telegram:

telegram_id, username, avatar_url, phone_number (если разрешено).

Техническая реализация:

Серверный webhook обрабатывает данные через telegram-web-app.js.

Если пользователь новый:

В таблице auth.users создается запись.

Генерируется JWT-токен (HMAC-SHA256, секрет из env).

Обработка ошибок:

При сбое — 3 автоматические попытки.

Логирование в Prometheus/Sentry.

1.2. Row-Level Security (RLS)
Политики:

Пользователи видят только свои данные в auth.users.

Все SQL-запросы фильтруются через current_setting('jwt.claims.user_id').

2. База данных
2.1. Схема PostgreSQL
Таблицы:
Таблица	Поля (ключевые)	Описание
auth.users	id (UUID), telegram_id, balance_stars, has_ton_wallet	Основные данные пользователей.
public.rooms	id, creator_id, type (enum), room_key, entry_fee, max_players, status	Информация о комнатах.
participants	room_id, user_id, tap_count	Участники комнат.
transactions	user_id, amount, type (entry/payout/fee)	Финансовые операции.
bonus_progress	user_id, taps_so_far, start_time, end_time	Прогресс бонусной комнаты.
2.2. Миграции и бэкапы
Миграции:

Скрипты в репозитории, автоматический запуск через dbmate up при деплое.

Бэкапы:

Ежечасные снимки в Cloudflare R2.

RTO ≤ 30 мин, RPO ≤ 15 мин.

3. Инфраструктура
3.1. Frontend
Стек: React + TypeScript + Vite.

Деплой:

Cloudflare Pages (PR → preview, main → production).

Локальная разработка:

bash
cloudflared tunnel --url http://localhost:5173
3.2. Backend
Стек: Node.js + Express + WebSocket (ws).

Балансировка:

Cloudflare Tunnel с sticky-сессиями через connect.sid.

Локальный запуск:

bash
cloudflared tunnel --url http://localhost:3001
3.3. CI/CD
GitHub Actions:

Проверка кода (ESLint, Prettier).

Деплой фронтенда и бекенда.

4. Игровая логика
4.1. Типы комнат
Standard-комнаты
Что видит пользователь:

6 карточек с разными ставками (20–500 Stars).

При выборе:

Если баланс недостаточен — открывается модалка оплаты через TON.

При успехе — переход в лобби с таймером ожидания (60 сек).

Технические детали:

Автоподбор игроков (до 10 человек).

Старт игры при заполнении комнаты.

Hero-комнаты
Создание комнаты:

Организатор вводит entry_fee → генерируется уникальный ключ (6 символов).

Таймер ожидания: 5 минут.

UI организатора:

Кнопка «Начать», список участников в режиме реального времени.

Присоединение участников:

Пользователь вводит ключ → списание entry_fee → переход в лобби.

При истечении времени: возврат средств, удаление комнаты.

Запуск игры:

Организатор нажимает «Начать» → 3-секундный обратный отсчет → игра (60 сек).

Bonus-комната
Цель: 1,000,000 тапов за 24 часа.

Прогресс:

Сохраняется при перезагрузке.

При успехе: начисление 100 Stars.

5. Пользовательский интерфейс
5.1. Этапы взаимодействия
Этап	Экран	Действия
Главный экран	Шапка: аватар, имя, баланс. Шесть карточек комнат, нижнее меню (Home, Leaderboard, Profile, Create).	Выбор комнаты, переход в профиль, создание Hero-комнаты.
Ожидание игроков	Полукруг аватарок, счетчик участников, таймер (60 сек).	Отправка эмодзи-реакций, выход из комнаты (с потерей средств).
Игра	Центральная кнопка «TAP», прогресс-бары участников, таймер (60 сек).	Тапы → мгновенное обновление локального счетчика → отправка батчей на сервер.
Результаты	Аватар победителя, призовой фонд, кнопки «В лобби»/«Сыграть ещё».	Автоподбор новой комнаты при выборе «Сыграть ещё».
5.2. Hero-комната (UI организатора)
Экран создания:

Поле для ввода entry_fee, кнопка «Создать».

После создания: модалка с ключом и таймером (5 мин).

Лобби:

Список участников, кнопка «Начать».

6. Интеграция с TON Connect
6.1. Привязка кошелька
В профиле: кнопка «Привязать кошелёк» → модалка с QR-кодом.

После подтверждения:

Обновление has_ton_wallet в БД.

Сохранение TON-адреса в таблицу wallets.

6.2. Платежи
Пополнение баланса:

Telegram Mini Apps SDK: window.Telegram.WebApp.openInvoice().

Списание средств:

Автоматическое при входе в комнату.

7. Античит и безопасность
7.1. Механизмы защиты
Валидация тапов:

Сервер проверяет:

Максимальная скорость: ≤15 тапов/сек.

Корректность user_id и timestamp.

Блокировка VPN/TOR:

Фильтрация IP-адресов через списки Cloudflare.

7.2. WebSocket
Формат сообщений:

json
{ "type": "taps", "user_id": "uuid", "count": 20, "timestamp": 1684320000000 }
Переподключение:

Экспоненциальный бэкофф (200 мс → 5 сек).

8. Мониторинг и логирование
8.1. Метрики (Prometheus)
Задержка API (P95), частота сообщений WS, ошибки/сек.

Алерты:

Warning: P95 ≥ 300 мс.

Critical: P95 ≥ 500 мс.

8.2. Логи (Loki/Grafana)
Хранение 14 дней.

Формат: JSON с полями user_id, endpoint, error_code.

9. Особые сценарии
9.1. Ничья в игре
Если два игрока набирают 200 тапов одновременно:

Дополнительный раунд между ними.

Призовой фонд делится поровну.

9.2. Отключение игрока
Во время ожидания: Возврат средств.

Во время игры: Прогресс-бар замирает, ставка не возвращается.

10. Дополнительные функции
10.1. Реферальная система
В профиле: уникальный код, список приглашенных.

Бонус: 10% от первого депозита реферала.

10.2. Лидерборд
Топ-10 игроков за день/неделю/всё время.

Фильтрация по типу комнат.