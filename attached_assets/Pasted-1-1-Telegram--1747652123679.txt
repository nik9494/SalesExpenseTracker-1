1. Аутентификация и безопасность
1. Регистрация/логин
    * При нажатии «Старт» в боте Telegram серверный webhook извлекает из telegram-web-app.js данные:
        * telegram_id 
        * username, first_name, last_name 
        * photo_url 
        * (опционально) phone_number — если разрешён доступ, иначе пусто. 
    * Если запись с таким telegram_id не найдена в схеме auth.users, создаётся новая запись с копированием полей из public.users. Анонименых записей не хранится. 
    * Проверка и копирование выполняются в рамках одной транзакции: либо всё прошло, либо нет. В случае ошибки попытка повторяется автоматически до трёх раз; при продолжающихся сбоях логируем в Prometheus/Sentry и возвращаем в бота вежливую ошибку. 
    * После успешного создания/нахождения пользователя генерируется JWT (HMAC‑SHA256, секрет из env). Подмена telegram_id невозможна, т.к. токен подписывается серверным секретом и валидируется по входящему telegram_id от клиента. 
2. Row‑Level Security
    * Общая политика: роли user и admin имеют доступ только к своим записям в auth.users. Отдельных RLS‑политик для public.users и auth.users не требуется: используем одну для схемы auth. 
    * Все запросы к данным пользователя идут по JWT и в БД автоматически подтягивается current_setting('jwt.claims.user_id') для фильтрации по user_id. 

2. База данных и миграции
1. PostgreSQL + миграции

    * Скрипты лежат в репозитории, при деплое CI/CD автоматически запускает dbmate up. 
    * Откатные скрипты (down) — только для локальной dev‑среды, в продакшене — только вперёд. 
1. Бэкапы и восстановление
    * Ежечасный снимок базы на объектное хранилище Cloudflare R2. 
    * RTO ≤ 30 мин, RPO ≤ 15 мин. 

3. Инфраструктура и CI/CD
1. Frontend
    * React + TypeScript + Vite для мгновенной сборки и HMR. 
    * Развёртывание: Cloudflare Pages (PR → preview, main → production). 
    * Linting/форматирование: ESLint + Prettier в CI. 
2. Backend & WebSockets
    * Node.js (TypeScript) + Express для REST‑API. 
    * ws или uWebSockets.js для WebSocket‑кластера. 
    * Балансировка через Cloudflare Tunnel + порт 443; подключений ≥ 5 000. Sticky sessions обеспечиваются по connect.sid, а при шардировании используем Pub/Sub (Cloudflare KV) для рассылки сообщений между инстансами. 
3. CI/CD
    * GitHub Actions:
        1. Проверка кода (lint, typecheck) 
        2. Деплой 

4. Мониторинг и логирование
* Prometheus + Alertmanager:
    * API latency P95, WS message rate, error rate 
    * Тревоги: warning при 300 ms P95, critical при 500 ms P95; ошибка WS reconnect > 5 сек. 
* Логи в JSON‑формате хранятся в Loki/Grafana, retention 14 дней. 
* Distributed tracing (OpenTelemetry → Jaeger) для REST‑запросов. 

5. API‑дизайн
1. Версионирование
    * /api/v1/... по REST для профиля, баланса, истории игр, создания комнат и других событий или сообщений. 
2. Идемпотентность
    * Эндпоинт создания комнаты и платежей принимает заголовок Idempotency-Key. 
3. Валидация
    * Zod для схем запросов/ответов. 
    * Ошибки отдаются в формате { code: string; message: string; details?: any }. 

6. Кэширование и i18n
* i18n: react-i18next, тексты на русском и английском. 
* Кэширование:
    * Cloudflare CDN для всех статики: JS/CSS, изображения (TTL 1 день). 
    * HTML-кеш (Edge‑rendered) с учётом языка и JWT — ttl 5 мин. 
* Service Worker не используется. 

7. TON Connect и платежи
1. Интеграция
    * Через @tonconnect/sdk в React: при первом входе происходит проверка уже существующего кошелька у пользователя связанного с telegram id если кошелька нет ничего не делаем потому что в профиле  показываем кнопку «Привязать кошелёк» в профиле если кошелька нет, если кошелек есть отображаем его в профиле  . 
    * Поле has_ton_wallet в users обновляется после успешного wallet.requestConnection(). Адрес сохраняется в таблицу wallets. 
2. Неудачные транзакции
    * Если пользователь закрыл окно транзакции: показываем мини‑модалку‑миниатюру «Продолжить» (прыгающую), плюс кнопку «Отменить». Состояние сохраняется в localStorage и на сервере. 

8. Игровая логика и античит
1. WebSocket‑протокол
    * Формат сообщений — JSON:   { "type": "taps", "user_id": "...", "count": 20, "timestamp": 1684320000000 }
    *    
    * Кадры (пакеты) отправляем при каждых 20 тапах или при таймауте 200 мс. 
2. Античит
    * Сервер считает скорость: если > 50 тапов за 2 сек, игрок помечается как читер и блокируется на текущую игру. 
    * Клиентские пакеты валидируются по таймстампам и user_id. 
3. Reconnect
    * При потере WS соединения клиент автоматически переподключается в фоне с экспоненциальным бэкоффом (200 мс → 1 с → 2 с → 5 с). 
    * После восстановления присылается полный статус прогресса. 
4. Реакции перед игрой
    * В комнате до старта игроки видят аватарки друг друга и могут кликнуть по фото, чтобы отправить случайный эмодзи‑реакцию всем участникам или кликать на свою аватарку чтоб излучать смайлики . 

9. UX: что видит пользователь
Этап	Экран и поведение
1. Запуск через бота	Бот присылает welcome‑сообщение на русском или на английском согласно гео данным с кнопкой «Вход в игру». Нажал — открылся web‑app открывается игра без дополнительных регистраций 
2. Главный экран	В шапке:слева вверху название приложение Chance Tap, аватар, имя, баланс . Шесть карточек комнат (20…500 Stars). Нижнее меню: Home(главная ) / Leaderboard (лидеры) / Profile (Профиль) / Create (Создать).
3. Выбор комнаты	При тапе по карточке: если недостаточно Баланса — автоматически стартует Telegram‑платёж Ton или выбор разных платежей, если средств достаточно попадает сразу в комнату где будет ждать всех игроков если в базе все комнаты заняты автоматически создается комната и туда помещается игрок и уже к этой комнате подключаются другие игроки ждем 60 секунд на сбор и подготовку всех игроков в режиме ожидания когда игроков это стандартная комната и когда набирается 10 игроков игра запускает таймер на старт внимание TAP это как отсчет 1,2,3. 
4. Ожидание	Заголовок с типом и ценой комнаты, счётчик участников (аватарки по полукругу с именемвсе игроки собираются  вокруг круглой кнопки для тапа  ), текст «Ожидаем X из Y игроков и таймеры 60 секунд на подготовку».
5. Начало игры	Стартует обратный отсчёт 3…1, прогресс‑бары по краям, центральная круглая кнопка «TAP». Таймер 60 с на игру .
6. Игра	Каждый тап мгновенно увеличивает локальный счётчик; пакеты по 20 тапов уходят на сервер; прогресс‑бары обновляются все игроки видят прогрейбар друг друга .
7. Результаты	Появляется победитель (аватар в центре) и призовой фонд. Две кнопки: «В лобби» и «Сыграть ещё».
8. Hero‑комната совсем другая логика	В Create(создать): выбор «Создать комнату» или войти,  при создании комнаты пользователь становится организатором и должен (задать сумму взноса  fee) когда организатор нажимает создать генерируется уникальный ключ который отображается у него на экране то есть появляется отдел где лежит этот уникальный ключ и организатор сможет поделится этим ключом с другими пользователями и активируется внизу экрана справа таймер который отсчитывает 5 минут если в течении пяти минут организатор не начинает игру комната автоматически удаляется и всем участникам возвращаются деньги назад а так же всех участников которые в комнате включая организатора выбрасывает на прошлую страницу автоматически хочу добавить что организатор может войти в комнату как организатор чтоб просто смотреть за процессом но принимать участие он не может так же организатор может в реальном времени видеть кто подключился к комнате все выстраиваются по кругу вокруг кнопки и у организатора должна быть кнопка старт или начать в этой комнате логика запуска игры происходит в ручном режиме Организатор создает комнату бесплатно и с него не берется оплата за вход в комнату потому что он приобретает статус организатор так же есть другое окно отдельно называется войти, когда пользователь нажимает  «Войти по ключу» он вводит ключ который передал ему организатор  автоматически взымается → оплата → и пользователь входит в комнату где видит в реальном времени других подключившихся игроков когда организатор считает что все игроки вошли он может начать игру и начинается отсчет старт внимание TAP где игрокам нужно тапать по кнопке , победитель определяется тот кто набирает 200 тапов или тот кто набрал больше всех тапов за 60 секунд игры таймер игры должен быть вверху слева когда игра завершается победитель получает 90%  банка а организатор получает 10% банка на счет 
Бонус комната	Кнопка «Start Bonus», прогресс‑бар (0/1 000 000), таймер 24 ч. При выполнении — +100 $ и возврат на Home прогрей или не завершенное событие можно наблюдать или отменить как в самой комнате бонуса так и в профиле пользователя .
10. Лидерборд	Топ‑10 за «Сегодня/Неделю/Все время» с аватаром, именем и суммой выигрыша.
11. Профиль	Баланс, адрес TON‑кошелька, статистика (выиграно), реферальная секция с кодом и списком рефералов. И отображение событий бонус комнаты если комната запущена если бонус комната не запущена отображение этого раздела не должно быть 
